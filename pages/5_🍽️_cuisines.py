# importando as bibliotecas
import pandas as pd
import inflection
import streamlit as st
import folium
from PIL import Image
from streamlit_folium import folium_static
from folium.plugins import MarkerCluster
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config( page_title='Cuisines', page_icon='üçΩÔ∏è', layout ='wide' )

#===================================================#
#     Fun√ß√µes
#===================================================#

def display_cuisine_metrics(cuisines):
    """ Esta fun√ß√£o exibe as m√©tricas culin√°rias
    
         A fun√ß√£o calcula as m√©dias de avalia√ß√£o agregada e custo m√©dio para dois
         para os restaurantes que oferecem uma determinada culin√°ria. Os dados s√£o filtrados com base
         na culin√°ria especificada pelo par√¢metro 'cuisines'.
        
        Input:
        - cuisines: Tipo de culin√°ria a ser analisada
        
        Output:
        - Exibi√ß√£o das m√©tricas da culin√°ria
    """
    linhas = df1['cuisines'] == cuisines
    df_aux = (df1.loc[linhas,['aggregate_rating','average_cost_for_two','cuisines','country','currency','city',
                                        'restaurant_id','restaurant_name']]
                .groupby(['country','city','restaurant_id','restaurant_name','average_cost_for_two','currency','cuisines'])
                .mean()
                .sort_values(['aggregate_rating','restaurant_id'],ascending = [False,True])
                .reset_index())

    aux = st.metric(
            label=f'{cuisines}: {df_aux.iloc[0,3]}',
            value=f'{df_aux.iloc[0,7]}/5.0',
            help=f"""
            Pa√≠s: {df_aux.iloc[0,0]}\n
            Cidade: {df_aux.iloc[0,1]}\n
            M√©dia Prato para dois: {df_aux.iloc[0,4]} ({df_aux.iloc[0,5]})
            """,
        )
    return aux

def display_top_restaurants(df1, date_slider):
    """ Esta fun√ß√£o exibe uma tabela com os principais restaurantes
    
         A tabela exibe informa√ß√µes dos principais restaurantes com base na avalia√ß√£o agregada.
         Os restaurantes s√£o classificados em ordem  decrescente de avalia√ß√£o agregada (selecionado os mesmos com a maiores avalia√ß√µes)
         e, em caso de empate, s√£o ordenados pelo ID do restaurante em ordem crescente (priorisando os restaurantes mais antigos.
         O n√∫mero de restaurantes a serem exibidos √© determinado pelo par√¢metro date_slider.
        
        Input:
        - df1: DataFrame contendo os dados  
        - date_slider: N√∫mero de restaurantes a serem exibidos (podendo ser alterado atrav√©s do filtro da barra lateral)
        
        Output:
        - Exibi√ß√£o da tabela com as informa√ß√µes dos principais restaurantes
    """
    df_aux = (df1.loc[:,['votes','cuisines','country','city','restaurant_id','restaurant_name','average_cost_for_two','aggregate_rating']]
            .groupby(['restaurant_id','restaurant_name','country','city','cuisines','average_cost_for_two','aggregate_rating'])
            .sum()
            .reset_index()
            .sort_values(['aggregate_rating','restaurant_id'],ascending = [False, True])
            .reset_index(drop = True))

    table = st.dataframe(df_aux.head(date_slider))
    return table

def display_top_cuisines(df1,date_slider,title,ascending):
    """ Esta fun√ß√£o exibe um gr√°fico de barras mostrando as principais culin√°rias com base na m√©dia de avalia√ß√£o
    
         A fun√ß√£o calcula a m√©dia de avalia√ß√£o para cada tipo de culin√°ria e exibe as principais culin√°rias
         em um gr√°fico de barras. O n√∫mero de culin√°rias exibidas √© determinado pelo par√¢metro date_slider.
         O gr√°fico de barras mostra a m√©dia de avalia√ß√£o, onde cada barra epresenta uma culin√°ria e a altura
         da barra representa a m√©dia de avalia√ß√£o.
    
    Args:
        df1: O dataframe com os dados.
        date_slider: O n√∫mero de culin√°rias a serem exibidas (podendo ser alterado atrav√©s do filtro da barra lateral).
        title: O t√≠tulo do gr√°fico.
        ascending: Define a ordem de classifica√ß√£o das culin√°rias. Se True, as culin√°rias ser√£o
                          classificadas em ordem crescente de m√©dia de avalia√ß√£o. Se False, as culin√°rias
                          ser√£o classificadas em ordem decrescente de m√©dia de avalia√ß√£o.
    
    Returns:
        fig: O gr√°fico de barras.
    """
    df_aux = (df1.loc[:, ['aggregate_rating', 'cuisines']]
              .groupby('cuisines')
              .mean()
              .reset_index()
              .sort_values('aggregate_rating', ascending=ascending)
              .round(2)
              .reset_index(drop=True)
              .head(date_slider))

    fig = go.Figure(data=[go.Bar(
            x=df_aux['cuisines'], y=df_aux['aggregate_rating'],
            width=0.75,
            text=df_aux['aggregate_rating'],
            textposition='auto',
            marker=dict(color='royalblue')
        )])

    fig.update_xaxes(title_text="Tipo de Culin√°ria")
    fig.update_yaxes(title_text="M√©dia de Avali√ß√£o")
    fig.update_layout(title=dict(text=title,x = 0.5,font=dict(size=18)))   
    fig.update_layout( xaxis=dict(showgrid=False), yaxis=dict(showgrid=False) )
    fig = st.plotly_chart(fig, use_container_width=True)
    return fig
    
def rename_columns(df):
    """ Esta fun√ß√£o realiza modifica√ß√µes nos nomes das colunas do dataframe sendo elas:
    
         Tipos de renomea√ß√£o:
         
         1. T√≠tulo: Converte a primeira letra de cada palavra em mai√∫scula
         2. Snakecase: Converte os espa√ßos em ( _ ) e letras min√∫sculas
         3. Espa√ßos: Remove os espa√ßos em branco das colunas

         Input: Dataframe
         output: Dataframe com as colunas renomeadas
    """

    title = lambda x: inflection.titleize(x)
    snakecase = lambda x: inflection.underscore(x)
    spaces = lambda x: x.replace(" ", "")
    cols_old = list(df.columns)
    cols_old = list(map(title, cols_old))
    cols_old = list(map(spaces, cols_old))
    cols_new = list(map(snakecase, cols_old))
    df.columns = cols_new
    return df

def country_name(df):
    """ Esta fun√ß√£o tem a responsabilidade de substituir os c√≥digos pelos nomes dos pa√≠ses correspondentes
        
        Input: Dataframe
        Output: Dataframe com os nomes dos pa√≠ses substituindo os c√≥digos de pa√≠s
    """
    df['country_code'] = df['country_code'].replace({
    1: "India",
    14: "Australia",
    30: "Brazil",
    37: "Canada",
    94: "Indonesia",
    148: "New Zeland",
    162: "Philippines",
    166: "Qatar",
    184: "Singapure",
    189: "South Africa",
    191: "Sri Lanka",
    208: "Turkey",
    214: "United Arab Emirates",
    215: "England",
    216: "United States of America",
    }) 
    return df



def color_name(df):
    """ Esta fun√ß√£o tem a responsabilidade de substituir os c√≥digos por nomes de cores 
            
        Input: Dataframe
        Output: Dataframe com os c√≥digos de cores substitu√≠dos pelos nomes de cores 
    """
    df['rating_color'] = df['rating_color'].replace({
    "3F7E00": "darkgreen",
    "5BA829": "green",
    "9ACD32": "lightgreen",
    "CDD614": "orange",
    "FFBA00": "red",
    "CBCBC8": "darkred",
    "FF7800": "darkred",
    }) 
    return df


def clean_dataframe(df):
    """ Esta fun√ß√£o tem a responsabilidade de limpar o dataframe
    
         Limpezas realizadas:
         
         1. Retorno apenas do primeiro nome dos elementos da coluna 'cuisines'
         2. Remo√ß√£o de dados nulos
         3. Remo√ß√£o de dados duplicados
         4. Remo√ß√£o de linhas com o valor 'Drinks Only' na coluna 'cuisines'
         5. Remo√ß√£o de linhas com o valor 'Mineira' na coluna 'cuisines'
         6. Renomea√ß√£o da coluna 'country_code' para 'country'
        
         Input: Dataframe
         Output: Dataframe limpo
    """
    
    # Retorno apenas do primeiro nome dos elementos da coluna 'cuisines'
    df["cuisines"] = df.loc[:, "cuisines"].apply(lambda x: x.split(",")[0] if isinstance(x, str) else x)
    
    # Remo√ß√£o de dados nulo
    df_clean = df.dropna()

    # Remo√ß√£o os dados duplicados
    df1 = df_clean.drop_duplicates()

    # Remo√ß√£o de linhas
    linhas_removidas = df['cuisines'] != 'Drinks Only'
    df1 = df1.loc[linhas_removidas,:]

    # Remo√ß√£o de linhas
    linhas_removidas = df['cuisines'] != 'Mineira'
    df1 = df1.loc[linhas_removidas,:]

    # Renomea√ß√£o da coluna 'country_code' para 'country'
    df1 = df1.rename(columns={'country_code': 'country'})
    return df1
# -------------------------------- Inicio da Estrutura l√≥gica do c√≥digo-----------------------------------
# ------------------------
# Import dataset
# ------------------------

df = pd.read_csv('zomato.csv')

# ------------------------
# Limpando dados
# ------------------------
rename_columns(df)
country_name(df)
color_name(df)
df1 = clean_dataframe(df)

#===================================================#
#     Barra lateral
#===================================================#

#Filtro de paises
st.sidebar.markdown('## Filtros')

# Cria√ß√£o do filtro de paises
country_options = st.sidebar.multiselect(
'Selecione os paises que deseja visualizar os Restaurantes:',
['Philippines', 'Brazil', 'Australia', 'United States of America',
   'Canada', 'Singapure', 'United Arab Emirates', 'India',
   'Indonesia', 'New Zeland', 'England', 'Qatar', 'South Africa',
   'Sri Lanka', 'Turkey'],
default = ['Brazil', 'Australia', 'Canada',
           'England', 'Qatar', 'South Africa'])

# cria√ß√£o de filtro de n√∫meros de restaurantes
date_slider = st.sidebar.slider(
    'Selecione a quantidade de Restaurantes que deseja visualizar',
    value = 10 ,
    min_value = 0, # inicio do filtro
    max_value = 20, # final do filtro
     )

st.sidebar.markdown('''---''') 

# Aplica√ß√£o do filtro no dataset
linhas_selecionadas = df1['country'].isin(country_options)
df1 = df1.loc[linhas_selecionadas,:]

st.sidebar.markdown('##### Developed by:') 
st.sidebar.markdown('#### Joao Victor - Data Scientist')  

st.sidebar.markdown('''---''') 
#===================================================#
#     layout no streamlit
#===================================================#
st.title('üçΩÔ∏è Vis√£o Culin√°ria')
st.markdown('''---''')

st.markdown('### Melhores Restaurantes dos Principais tipos Culin√°rios')

with st.container():
    
    italian, american, arabian, japanese, brazilian = st.columns(5)
    
    with italian:
        display_cuisine_metrics('Italian')
    with american:
        display_cuisine_metrics('American')
    with arabian:
        display_cuisine_metrics('Arabian')
    with japanese:
        display_cuisine_metrics('Japanese')
    with brazilian:
        display_cuisine_metrics('Brazilian')

    st.markdown('''---''')     

    st.markdown(f'## Top {date_slider} Restaurantes')
    
    display_top_restaurants(df1, date_slider)
    
    st.markdown('''---''') 
    
with st.container():
    col1,col2 = st.columns(2)
        
    with col1:
        display_top_cuisines(df1,date_slider,f'Top {date_slider} Melhores Tipos de Culin√°ria',ascending = False)
        
    with col2:
        display_top_cuisines(df1,date_slider,f'Top {date_slider} Piores Tipos de Culin√°ria',ascending = True)
       
